/* Задание 1
• Используя Symbol.iterator, создайте объект "Музыкальная коллекция", который можно итерировать. Каждая итерация должна возвращать следующий альбом из коллекции.

• Создайте объект musicCollection, который содержит массив альбомов и имеет свойство-символ Symbol.iterator. Каждый альбом имеет следующую структуру:

{
title: "Название альбома",
artist: "Исполнитель",
year: "Год выпуска"
}

• Реализуйте кастомный итератор для объекта musicCollection. Итератор должен перебирать альбомы по порядку.
• Используйте цикл for...of для перебора альбомов в музыкальной коллекции и вывода их на консоль в формате: Название альбома - Исполнитель (Год выпуска) */

const musicIterator = Symbol.iterator;

const musicCollections = {
    albums:[
        {
            title: "Альбом 1",
            artist: "Исполнитель 1",
            year: "2000"
        },
        {
            title: "Альбом 2",
            artist: "Исполнитель 2",
            year: "2010"
        },
        {
            title: "Альбом 3",
            artist: "Исполнитель 3",
            year: "2020"
        }
    ],

[musicIterator]: function() {
    let index = 0;
    const albums = this.albums;

    return {
      next: function() {
        if (index < albums.length) {
          return { value: albums[index++], done: false };
        } else {
          return { done: true };
        }
      }
    };
  }
};



for (const album of musicCollections) {
    console.log(`Название альбома: ${album.title}, Исполнитель: ${album.artist}, Год выпуска: ${album.year}`);
}


// task 2
/* Вы управляете рестораном, в котором работают разные повара, специализирующиеся на определенных блюдах. Клиенты приходят и делают заказы на разные блюда.

Необходимо создать систему управления этими заказами, которая позволит:

• Отслеживать, какой повар готовит какое блюдо.
• Записывать, какие блюда заказал каждый клиент.

Используйте коллекции Map для хранения блюд и их поваров, а также для хранения заказов каждого клиента. В качестве ключей для клиентов используйте объекты.

Повара и их специализации:

Виктор - специализация: Пицца.
Ольга - специализация: Суши.
Дмитрий - специализация: Десерты.

Блюда и их повара:

Пицца "Маргарита" - повар: Виктор.
Пицца "Пепперони" - повар: Виктор.
Суши "Филадельфия" - повар: Ольга.
Суши "Калифорния" - повар: Ольга.
Тирамису - повар: Дмитрий.
Чизкейк - повар: Дмитрий.

Заказы:

Клиент Алексей заказал: Пиццу "Пепперони" и Тирамису.
Клиент Мария заказала: Суши "Калифорния" и Пиццу "Маргарита".
Клиент Ирина заказала: Чизкейк. */


// Создаем коллекции для хранения информации о поварах, блюдах и заказах.
const chefs = new Map();
const dishes = new Map();
const orders = new Map();

// Добавляем информацию о поварах
chefs.set('Виктор', 'Пицца');
chefs.set('Ольга', 'Суши');
chefs.set('Дмитрий', 'Десерты');

// Добавляем информацию о блюдах 
dishes.set('Пицца "Маргарита"', 'Виктор');
dishes.set('Пицца "Пепперони"', 'Виктор');
dishes.set('Суши "Филадельфия"', 'Ольга');
dishes.set('Суши "Калифорния"', 'Ольга');
dishes.set('Тирамису', 'Дмитрий');
dishes.set('Чизкейк', 'Дмитрий');

// Добавляем информацию о заказах клиентов
orders.set({ name: 'Алексей' }, ['Пицца "Пепперони"', 'Тирамису']);
orders.set({ name: 'Мария' }, ['Суши "Калифорния"', 'Пицца "Маргарита"']);
orders.set({ name: 'Ирина' }, ['Чизкейк']);

// Функция для вывода информации о заказах клиентов и их готовящих поварах.
function printOrderDetails() {
  for (const [client, clientOrders] of orders) {
    console.log(`Заказы для клиента ${client.name}:`);
    for (const order of clientOrders) {
      const chef = dishes.get(order);
      console.log(`- ${order} (Готовит повар: ${chef})`);
    }
    console.log('------------------------');
  }
}


printOrderDetails();
